www.gulpjs.com.cn


如果在mac 或者 linux下遇到了权限问题，在下面这个命令的前面加上 sudo npm install gulp -g    并输入mac密码
=+--------------------+=
{
    -v
    --gulpfile
    --cwd
    -T
}
=+--------------------+=
mkdir  文件夹
cd    文件夹
npm init

npm install gulp --save-dev

+-------------------------------------------+
1>例如gulpfile.js文件改名字了 gulpfile1.js

gulp   --gulpfile gulpfile1.js
gulp hello  --gulpfile gulpfile1.js

2>cwd  切换工作目录
如果在history文件夹下 访问history里面的gulpfile.js
gulp hello --cwd history

3> -T  依赖树

gulp hello -T

4>--tasks-simple
gulp -T deault --tasks-simple

=>hello
=>default
5> --silent  只执行不说话

+----------------------------重要---------------------------+
通过 gulp.src()方法获取到想要处理的文件流
gulp.dest()方法 则把流中的内容写入到文件中。
//copy任务
gulp.src('script/src.js')//获取文件流的api
    .pipe(gulp.dest('dist/dest.js'));//写文件的api--dist/dest.js---这是目录名字

要想改变文件名 可以使用插件 gulp-rename

--当我们没有在gulp.src()方法中配置base属性时，base的默认值为通配符开始出现之前那部分
路径例如：
gulp.src('app/src/**/*.css');//此时base的值为app/src


+-----------------------------------------------------------------+
Virtual file format==虚拟文件格式

vinyl

=============glob语法==================

*   匹配文件路径的0个或多个字符，但不匹配路径分隔符（/）  匹配一级路径
**  匹配路径中的0个或多个目录及其子目录，需要单独出现，即它左右不能有其他东西了。如果在末尾，也能匹配文件  匹配多级路径

？  匹配一个字符（不匹配路径分隔符）

==================gulp.watch()===============================
gulp.watch()用来监控文件的变化
【1】：
gulp.watch(glob,[,opts],tasks);
    -glop 为要监视的文件匹配模式，规则和用法与gulp.src() 方法中的glop相同
    -opts 为一个可选的配置对象，同城不需要用到
    -tasks为文件变化后要执行的任务，为一个数组
例：
    gulp.task('uglify',function(){
    });
    gulp.task('reload',function(){
    });
    gulp.watch('js/**/*.js',['uglify','reload'])

【2】：gulp.watch()还有另一种使用方式：
gulp.watch(glob[,opts,cb]);
glob 和 opts 参数与第一种用法相同
cb参数为一个函数 、每当监视的文件发生变化时，就会调用这个函数，并且会给它传入一个对象
该对象包含了文件变化的一些信息，type属性为变化的类型,可以是added,changed,deleted;path
属性为发生变化的文件的路径
gulp.watch('js/**/*.js',function(event){
    console.log(event.type);//变化类型 added为新增，deleted为删除，changed为改变
    console.log(event.path);//变化的文件的路径
});


==========================+gulp--插件+============================

编译 Sass:gulp-sass
编译 Less:gulp-less
合并文件 :gulp-concat
压缩js文件:gulp-uglify
重命名js文件： gulp-rename
优化图像大小 : gulp-imagemin
压缩css文件  ：gulp-minify-css
创建本地服务器 : gulp-connect
实时预览     ：  gulp-connect
html文件压缩 ： gulp-minify-html

npm install xx  --save-dev  安装插件

gulp-load-plugins 这个插件能自动帮你加载 package.json 文件里的gulp插件

"devDependencies":{
    "gulp":'3.9.0'
}

然后我们可以在gulpfile.js中使用gulp-load-plugins来帮助我们加载插件：
var  gulp = require("gulp");
//加载gulp-load-plugins插件，并马上运行它
var $ = require('gulp-load-plugins')();
然后我们要使用 gulp-rename 和 gulp-ruby-sass这两个插件的时候
就可以直接$.concat 和$.connect 来代替。。业绩是原始插件名去掉gulp-前缀

【npm init   -- 生成一个package.json】

【install】
{
    npm install gulp-load-plugins gulp-concat  --save-dev
    npm install gulp-less --save-dev
    npm install gulp-connect --save-dev
    npm install gulp-uglify --save-dev
    npm install gulp-rename --save-dev
}

【html文件压缩】
var gulp = require('gulp');
var minifyHtml = require('gulp-minify-html');

gulp.task('minify-html',function(){
    gulp.src('src/*.html')//要压缩的html文件
    .pipe(minifyHtml())   //压缩
    .pipe(gulp.dest('dist/html'))//输出到目的地
});

【重命名】
npm install gulp-rename --save-dev


var gulp = require('gulp');
var concat = require("gulp-concat");
var uglify = require("gulp-uglify");
var rename = require("gulp-rename");
gulp.task('uglify',function(){
      return gulp.src(['app/*.js','!app/*.tmp.js'])//指定要处理的文件
            .pipe(concat('main.js'))//把多个js文件合并成一个文件
            .pipe(gulp.dest('dist/js'));//保存此文件
            .pipe(uglify())//对合并后的main.js文件进行压缩

            .pipe(rename('main.min.js'))//对文件进行重命名
            .pipe(gulp.dest('dist/js'));//输出到目的地
})
【gulp-minify-css  css压缩】
npm install gulp-minify-css --save-dev

var gulp = require('gulp');
var less = require('gulp-less');
var minify = require('gulp-minify-css');
var rename = require("gulp-rename");

gulp.task('less',function(){
    return gulp.src('app/less/main.less')//指定less文件
            .pipe(less())//把less编译成css
            .pipe(gulp.dest('dist/css'))//输出到目的地   压缩前的

            .pipe(minify)//对css进行压缩
            .pipe(rename('main.min.css'))//重命名
            .pipe(gulp.dest('dist/css'))//输出到目的地
});
gulp.task('default',['less']);


 .pipe(rename(function (path) {
    //path.dirname += "/ciao";//目录
    path.basename += "-goodbye";//文件名  ".min"
    path.extname = ".md"//扩展名 ".css"
  }))

【gulp-imagemin 压缩图片】
npm install gulp-imagemin --save-dev

var gulp = require('gulp');
var imagemin = require('gulp-imagemin');

gulp.task('copy-images',function(){
    return gulp.src('app/imgs/**/*.{jpg,png}')//指定要压缩的图片
            .pipe(imagemin())//进行图片压缩
            .pipe(gulp.dest('dist'))//输出目的地
});

【jshint  代码检查】
npm install gulp-jshint --save-dev

var gulp = require('gulp');
var jshint = require('gulp-jshint');
gulp.task('jsLint',function(){
    gulp.src('src/*.js')
    .pipe(jshint())//进行代码检查
    .pipe(jshint.reporter());//输出检查结果
});


===============================+gulp插件的组合【Yeoman】+=======================================


Yeoman   主要提供了三个工具：脚手架(yo),构建工具(grunt),包管理器(bower),
这上工具是分别独立开发的。但是需要配合使用，来实现我们更高效的工作流模式

项目生成器。帮我们生成项目

安装  Yeoman
【第一步 安装】
npm  install -g yo


打开 http://yeoman.io找到了一个官方生成器

gulp-webapp

--->【第二部 ->生成项目】
    mkdir gulpdemo
    cd gulpdemo
    npm install -g generator-gulp-webapp@0.2.0  //为了保证效果一直，我们统一使用0.2.0版本 es5{ @0.2.0}
    yo gulp-webapp gulpdemo



------------------【babel安装】---------------------
npm install babel-cli -g
npm install --save-dev babel-preset-es2015      //把es5-》es6

.babelrc
{
    'presets':['es2015'],
    'plugins':[]
}

touch .babelrc  //创建文件
babel --help
//命令
babel 4.arrow.js -o 4.es5.arrow.js   //es6转换成es5 ***

--【常用的命令】
babel --help 更多命令
babel -o 输出到一个文件 `babel mobile.js -o mobile.buidd.js`
babel -w 提供watch 方法`babel -w mobile.js -o mobile.build.js`
babel -s 生成sourcemap `babel -s -w mobile.js -o mobile.build.js`
babel -d 指定要编译的目录 `babel -d es5/ es6/`
-------------------------------------------------------

=========================【+--webpack--+】=【css/js当成模块】==================================

全局安装
***    npm install webpack -g

webpack -w 提供watch方法 ，实时进行打包更新
webpack -p 对打包后的文件进行压缩
webpack -d 提供 sourcemap 方便调试
webpack --config 以某个config 作为打包
webpack --help 更多命令

本地安装
***    npm install webpack --save-dev
    安装到 node_modules并安装到了依赖列表里

编译 entry.js并打包到 bundle.js
    webpack ./entry.js bundle.js

【加载css文件】
    安装loader:
***    npm install css-loader style-loader
    首页style.css也看成是一个模块
    css-loader 来读取它
    style-loader 把它插入到页面中


    require("css!./style.css"); == css-loader!./style.css

------【配置文件】--------------

webpack 在执行的时候可以通过指定的配置文件
默认情况下会执行当前目录中的  webpack.config.js
配置文件是一个node.js模块，返回一个json格式的配置信息对象
添加配置文件

module.exports = {
    entry:'./entry.js', //定义打包的入口文件，每一个键值对，就是一个入口文件
    output:{    //配置打包结果
        path:__dirname,     //定义了输出的文件夹
        filename:'bundle.js"    //定义了打包结果文件的名称
    },
    module:{    //定义模块的加载逻辑
        loaders:[   //定义了一系列的加载器
            {test:/\.css$/,loader:'style!css'},//当需要加载的文件匹配'test'正则时。就会调用后面的`loadder`对文件进行加载
            {test:/\.css$/,loader:'style!css'} //可以定义多个
        ]

    }
    /*,
    plugins:[
        new webpack.BannerPlugin('This file is create by mutouren')
    ]
    */
}

有配置文件。就可以直接执行 webpack
如果没有配置文件  执行： webpack ./entry.js bundle.js

------【插件】-------
插件的使用一般是在webpack的配置信息plugins选项中指定 我们可以
    向生成的打包文件头部插入一些信息

var webpack = require("webpack");
plugins:[
    new webpack.BannerPlugin('This file is create by mutouren')
]
-----【加载图片】----
url-loader 会将样式中引用到的图片转为模块来处理
***  npm install url-loader
limit的参数意思是图片大小小于这个限制的时候，会自动启用base64编码图片

------【别名】----
别名的作用是把用户的一个请求重定向到另一个路径
resolve:{
    alias:{
        jquery:'./js/jquery.js'
    }
}
【***】------【expose -****-】-----很常用  //就是可以使用jquery
    如果想在前台使用打包的jquery需要把jquery暴露出来
***   npm install expose-loader --save-dev
    把$作为别名为jquery的变量暴露到全局上下文中
    require('expose?$!jquery');

------【使用es6】----
*** npm install babel-core --save-dev
*** npm install babel-loader --save-dev
*** npm install babel-preset-es2015
{test:/\.js?$/,loader:'babel-loader',exclude:/node_modules/,query:{compact:false,presets:['es2015']}}

---【打包成多个资源文件】----
entry属性可以是一个对象，而对象名也就是key会作为下面output的filename属性的[name]

【***】-----------【公共模块-插件】--------
我们利用插件就可以智能提前公共部分，以提供我们浏览器的缓存复用
plugins:[
    new webpack.optimize.CommonsChunkPlugin('common.js')
]
"我们需要手动在html上去加载common.js,并且是必须要最先加载"

------------【gulp】-----------------------就是打包
var gutil = require("gulp-util");
var webpack = require("webpack");
var webpackConfig = require("./webpack.config.js");
gulp.task("webpack",function(callback){
    var myConfig = Object.create(webpackConfig);
    webpack(
        //configuration
        myConfig
        ,
        function(err,stats){
            callback();
        }
    );
});

---------------【webpack-dev-server】【服务】-----------------------------
***　　npm install webpack-dev-server -g

webpack-dev-server  回车

【***】----【比较全的webpack.config.js】----【****】

var webpack = require("webpack");
module.exports = {
    //entry:'./entry.js', //定义打包的入口文件，每一个键值对，就是一个入口文件 可以是一个数组['./entry.js','./entry2.js']
    entry:{
        bundle1:"./entry1.js",
        bundle2:"./entry2.js"
    },
    output:{    //配置打包结果
        path:__dirname,     //定义了输出的文件夹--当前目录下
        //filename:'bundle.js'   //定义了打包结果文件的名称
        filename:"[name].js"
    },
    module:{    //定义模块的加载逻辑
        loaders:[   //定义了一系列的加载器
            {test:/\.css$/,loader:'style!css'}//当需要加载的文件匹配'test'正则时。就会调用后面的`loadder`对文件进行加载
            ,
            {test:/\.(png|jpg)$/,loader:'url?limit = 4000'}//4000 == 4k 如果大小小于4k 转换成base64引入到页面里面去
            ,
            {test:/\.js?$/,loader:'babel',exclude: /node_modules/, query: {compact: false,presets:['es2015']}}
        ]
    }
    ,
    plugins:[
            new webpack.BannerPlugin('//jht') ,  //前缀
            new webpack.optimize.CommonsChunkPlugin('common.js')//通用的js
    ]
    ,
    resolve:{//别名
        alias:{
            jquery:"./lib/jquery/jquery.js"
        }
    }
}

【***】----【end】-------------------------【***】

--------------------【模块】--------------------
//import
ES6在语言规格的层面上，实现了模块功能
。export 命令用于规定模块的对外接口  [导出。不导出外部不能用]
。import 命令用于输入其他模块提供的功能
。一个模块就是一个独立的文件。该文件内部的所有变量，外部午饭获取
。如果你希望外部能够读取模块内部的某个变量，就必须使用export关键字输出该变量

---export
。导出变量
。导出变量为一个对象
。函数或类(class)

---import
。模块的整体加载
    import * as util from './util';   同比于 import {name,age} from './exp1.js';
。export default 命令，为模块指定默认输出
export default function(){
    console.log('foo');
}
--
import customName from './export-defatul';

。export default 对应的import 语句不需要使用大括号，不使用export 【】。
default对应的import 语句需要使用大括号
。一个模块只能有一个默认输出




















