[sync--同步]
将文件作为 整体 读入缓存区     readFile   readFileSync
将文件 部分 读入缓存区         read       readSync
将数据 完整 写入文件           writeFile   writeFileSync
将缓存区的 部分 内容写入文件       write   writeSync
////////////////////////////////
stream.Readable 可读流
使用实现了。stream.Readable接口的对象来将对象数据读取为数据流，在
您表明您准备好接收之前，Readable流并不会开始发射数据
fs.ReadStream  读取文件
http.IncomingMessage       客户端的请求或服务器端的响应
net.Socket                 tcp链接中的socket对象
process.stdin              标准输入流
Gzip                       数据压缩

////////
可读流模式
--如何切换到流动模式
  - 添加一个data世界处理器来监听数据
  - 调用resume() 方法来明确开启数据流
  - 调用pipe() 方法将数据发送到一个writable可读流
//////
ReadStream 文件可读流
fs.createReadStream(path,[options]);
-options
  - flags 对文件采取何种操作，默认为"r"
  - encoding 指定 编码 ，默认为null
  - autoClose 读取数据后是否关闭文件描述符
  - start 用证书标示文件 开始 读取的字节数的索引位置
  - end 用整数标示文件 结束 读取的字节数的索引位置（包括end位置）
  - highWaterMark 最高水位线，听着从底层资源读取前内部缓冲
    区最多能存放的字节数。缺省为 64kb
///////////////////////////
rs.pause();//暂停ssss
rs.resume;//恢复

/////////////////////////
fs.createWriteStream(path,options)

writable 可写流
使用各种实现stream.Writable 接口的对象来将流数据写入到对象中

fs.writeStream   写入文件
http.ClientRequest    客户端请求对象
http.ServerResponse    http中的响应对象
net.Socket   Tcp中的socket对象
process.stdout     标准输出
process.stderr     错误输出
Gunzip             解压
////////////////////
write方法
writable.write(chunk,[encoding],[callback]);
~参数
 - chunk 要 写入 的数据 ，Buffer或字符串对象，必须指定
 - encoding 写入 编码 ，chunk为字符串时有用，可选
 - callback 写入成功后的 回调 .
~返回值为布尔值，系统缓存区定满时为false.未满时为true
/////////
pipe流，尤其是pipe()方法的初衷，是将数据的 滞流量 限制到一个可接受的水平，
以使得不同速度的来源和目标不会 淹没 可用内存。
readStream.pipe(writeStream,[options]);
//////////
 全部写进去之后触发一个drain事件